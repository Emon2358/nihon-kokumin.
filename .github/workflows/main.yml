name: Download & Benchmark MP3

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  download-and-benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # リポジトリチェックアウト
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      # npmキャッシュ
      - uses: actions/cache@v3
        id: cache-npm
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      # 必要パッケージ＆webtorrent-cliをローカルインストール
      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq aria2 git
          npm install webtorrent-cli

      # フォルダ名抽出＋準備 (所要時間計測)
      - name: Extract album name & mkdir
        id: prep
        run: |
          START=$(date +%s)
          curl -L -o album.torrent https://nyaa.si/download/655498.torrent
          META=$(npx webtorrent info album.torrent --json)
          NAME=$(echo "$META" | jq -r '.name')
          mkdir -p albums/"$NAME"
          END=$(date +%s)
          echo "prep_time=$((END-START))" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT

      # MP3を並列ダウンロード (所要時間計測)
      - name: Parallel MP3 download
        id: dl
        run: |
          START=$(date +%s)
          META=$(npx webtorrent info album.torrent --json)
          IDX_LIST=($(echo "$META" | jq -r '.files | to_entries[] | select(.value.path|endswith(".mp3")) | .key'))
          for idx in "${IDX_LIST[@]}"; do
            aria2c \
              --dir=albums/"${{ steps.prep.outputs.name }}" \
              --select-file=$idx \
              --max-connection-per-server=4 \
              --split=4 \
              --min-split-size=1M \
              --continue=true \
              --retry-wait=2 \
              --max-tries=5 \
              --quiet=true \
              https://nyaa.si/download/655498.torrent \
            &
          done
          wait
          END=$(date +%s)
          echo "download_time=$((END-START))" >> $GITHUB_OUTPUT

      # コミット＆プッシュ (所要時間計測／変更なければスキップ)
      - name: Commit and Push
        id: push
        run: |
          START=$(date +%s)
          git config user.name "github-actions[bot]"
          git config user.email "bot@users.noreply.github.com"
          git add albums/"${{ steps.prep.outputs.name }}"
          git commit -m "Add MP3: ${{ steps.prep.outputs.name }}" || echo "No changes to commit"
          git push
          END=$(date +%s)
          echo "push_time=$((END-START))" >> $GITHUB_OUTPUT

      # ベンチ結果の表示
      - name: Show benchmark results
        run: |
          echo "===== Benchmark Results ====="
          echo "Prepare : ${{ steps.prep.outputs.prep_time }} sec"
          echo "Download: ${{ steps.dl.outputs.download_time }} sec"
          echo "Push    : ${{ steps.push.outputs.push_time }} sec"
