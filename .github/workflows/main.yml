name: Download & Benchmark MP3

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  download-and-benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      ## 1. ソースチェックアウト
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      ## 2. 必要パッケージインストール
      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq aria2 git transmission-cli

      ## 3. トレント取得＋フォルダ名抽出 & mkdir （所要時間計測）
      - name: Extract album name & mkdir
        id: prep
        run: |
          START=$(date +%s)
          # トレントファイルを取得
          curl -L -o album.torrent https://nyaa.si/download/655498.torrent

          # transmission-show で Name: 行を抜き出し
          NAME=$(transmission-show album.torrent \
            | sed -n 's/^[[:space:]]*Name:[[:space:]]*//p')
          echo "Extracted name: $NAME"

          # albums/<name> ディレクトリ作成
          mkdir -p albums/"$NAME"

          END=$(date +%s)
          echo "prep_time=$((END-START))" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT

      ## 4. MP3ファイルのインデックスを取得して並列ダウンロード（所要時間計測）
      - name: Parallel MP3 download
        id: dl
        run: |
          START=$(date +%s)

          # 各ファイルの一覧を取得し、拡張子 .mp3 の行だけインデックス番号を抜き出し
          IDX_LIST=($(transmission-show -l album.torrent \
            | awk '/\.mp3$/ {print $1}'))

          # 並列ダウンロード
          for idx in "${IDX_LIST[@]}"; do
            aria2c \
              --dir=albums/"${{ steps.prep.outputs.name }}" \
              --select-file="$idx" \
              --max-connection-per-server=4 \
              --split=4 \
              --min-split-size=1M \
              --continue=true \
              --retry-wait=2 \
              --max-tries=5 \
              https://nyaa.si/download/655498.torrent \
            &
          done
          wait

          END=$(date +%s)
          echo "download_time=$((END-START))" >> $GITHUB_OUTPUT

      ## 5. コミット＆プッシュ（変更がなければスキップ／所要時間計測）
      - name: Commit and Push
        id: push
        run: |
          START=$(date +%s)
          git config user.name "github-actions[bot]"
          git config user.email "bot@users.noreply.github.com"

          git add albums/"${{ steps.prep.outputs.name }}"
          # 変更なければ「No changes to commit」で終了
          git commit -m "Add MP3: ${{ steps.prep.outputs.name }}" || echo "No changes to commit"
          git push || echo "Push failed (check write permissions)"

          END=$(date +%s)
          echo "push_time=$((END-START))" >> $GITHUB_OUTPUT

      ## 6. ベンチ結果をまとめて表示
      - name: Show benchmark results
        run: |
          echo "===== Benchmark Results ====="
          echo "Prepare : ${{ steps.prep.outputs.prep_time }} sec"
          echo "Download: ${{ steps.dl.outputs.download_time }} sec"
          echo "Push    : ${{ steps.push.outputs.push_time }} sec"
